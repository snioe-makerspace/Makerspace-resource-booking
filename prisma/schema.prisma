generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id                      String                    @id @db.Uuid
  name                    String
  mobile                  String
  email                   String
  role                    UserRole                  @default(user)
  isNew                   Boolean                   @default(true) @map("isnew")
  isBlacklisted           Boolean                   @default(false) @map("is_blacklisted")
  cartId                  String?
  type                    ProfileType               @default(STUDENT)
  typeData                Json?                     @default("{}") @map("type_data") @db.Json
  bookings                Booking[]
  cart                    Cart?
  training                ETraining[]
  ETrainingSessionBooking ETrainingSessionBooking[]
  events                  Event[]
  RevalidateProfile       RevalidateProfile?

  @@map("profile")
}

model RevalidateProfile {
  id     String  @id @default(nanoid(7))
  userId String  @unique @db.Uuid
  user   Profile @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Equipment {
  id              String           @id @unique @default(nanoid(7))
  name            String
  model           String
  description     String           @db.VarChar(2500)
  image           String
  eCategoriesId   String
  secondaryStatus ESecondaryStatus @default(ACTIVE) @map("secondary_status")
  specifications  String           @db.VarChar(2500)
  onlyForPHDs     Boolean          @default(false)
  instances       EInstance[]
  category        ECategories      @relation(fields: [eCategoriesId], references: [id], onDelete: Cascade)
  manuals         Manual[]
  videos          Video[]
}

model Manual {
  id          String    @id @unique @default(nanoid(7))
  name        String
  pdf         String
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model Video {
  id          String    @id @unique @default(nanoid(7))
  video       String
  equipmentId String
  equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model EInstance {
  id              String           @id @unique @default(nanoid(7))
  name            String
  description     String           @db.VarChar(2500)
  status          EStatus?         @default(available)
  cost            Float
  billingType     EBillingType     @default(PER_SLOT) @map("billing_type")
  equipmentId     String
  availability    Json             @default("{}") @db.Json
  secondaryStatus ESecondaryStatus @default(ACTIVE) @map("secondary_status")
  BookingItem     BookingItem[]
  CartItem        CartItem[]
  equipment       Equipment        @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
}

model ETraining {
  id        String           @id @unique @default(nanoid(7))
  userId    String           @map("user_id") @db.Uuid
  sessionId String
  datetime  DateTime
  session   ETrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  user      Profile          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model ETrainingSession {
  id                      String                    @id @unique @default(nanoid(7))
  categoryIds             String[]
  name                    String
  day                     Json                      @default("{}") @db.Json
  bookings                ETraining[]
  ETrainingSessionBooking ETrainingSessionBooking[]
  categories              ECategories[]             @relation("ECategoriesToETrainingSession")
}

model Cart {
  id     String     @id @unique @default(nanoid(7))
  userId String     @unique @map("user_id") @db.Uuid
  user   Profile    @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  CartItem[]
}

model CartItem {
  id         String    @id @unique @default(nanoid(12))
  instanceId String
  start      DateTime
  end        DateTime
  cost       Float     @default(0)
  cartId     String
  createdAt  DateTime  @default(now()) @map("created_at")
  cart       Cart      @relation(fields: [cartId], references: [id], onDelete: Cascade)
  instance   EInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String        @id @unique @default(nanoid(7))
  userId        String        @db.Uuid
  mentor        String
  description   String
  deadline      DateTime
  cost          Float
  paymentId     String?
  status        BookingStatus @default(PENDING)
  createdAt     DateTime      @default(now()) @map("created_at")
  adminNotes    String?       @map("admin_notes") @db.VarChar(255)
  paymentStatus PaymentStatus @default(PENDING) @map("payment_status")
  user          Profile       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items         BookingItem[]
}

model BookingItem {
  id         String    @id @unique @default(nanoid(12))
  instanceId String
  start      DateTime
  end        DateTime
  bookingId  String
  cost       Float     @default(0)
  booking    Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  instance   EInstance @relation(fields: [instanceId], references: [id], onDelete: Cascade)
}

model ECategories {
  id              String             @id @unique @default(nanoid(7))
  name            String
  equipment       Equipment[]
  trainingSession ETrainingSession[] @relation("ECategoriesToETrainingSession")
}

model RepoElectronics {
  id          String  @id @unique @default(nanoid(7))
  name        String
  model       String
  loanedQty   Int
  image       String
  description String? @db.VarChar(255)
}

model RepoMaterials {
  id          String  @id @unique @default(nanoid(7))
  name        String
  quantity    Int
  dimensions  Json    @db.Json
  description String? @db.VarChar(255)
}

model ContentManagement {
  id        String   @id @unique @default(nanoid(7))
  name      String
  pathname  String   @unique
  data      Json
  updatedAt DateTime @default(now()) @map("updated_at")
}

model Event {
  id          String      @id @unique @default(nanoid(7))
  title       String
  previewDesc String
  desc        String
  image       String
  startTime   DateTime    @map("start_time")
  endTime     DateTime    @map("end_time")
  venue       String
  venueLink   String?     @map("venue_link")
  status      EventStatus @default(UPCOMING)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @map("updated_at")
  type        EventType   @default(GENERAL)
  userId      String      @db.Uuid
  user        Profile     @relation(fields: [userId], references: [id])
}

model Tutorials {
  id          String   @id @unique @default(nanoid(7))
  title       String
  previewDesc String
  desc        String
  startTime   DateTime @map("start_time")
  endTime     DateTime @map("end_time")
  date        DateTime
  mentors     String
}

model ETrainingSessionBooking {
  id               String           @id @unique @default(nanoid(7))
  user_id          String           @db.Uuid
  user             Profile          @relation(fields: [user_id], references: [id], onDelete: Cascade)
  DateTime         DateTime
  sessionId        String
  ETrainingSession ETrainingSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
}

enum EStatus {
  available
  inUse       @map("in_use")
  maintenance
  broken
}

enum BookingStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum UserRole {
  admin
  user
}

enum ProfileType {
  STUDENT
  FACULTY
  STAFF
  PHD
}

enum ESecondaryStatus {
  ACTIVE
  DELETED
  DISABLED
}

enum PaymentStatus {
  PENDING
  VERIFICATION
  SUCCESS
  FAILED
}

enum EBillingType {
  PER_SLOT
  PER_SESSION
}

enum EventType {
  GENERAL
}

enum EventStatus {
  UPCOMING
  ONGOING
  COMPLETED
}
